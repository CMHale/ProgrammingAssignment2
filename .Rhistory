makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function () x
setinverse <- function(solve(x)) m <<- inverse
getinverse <- function()m
}
?solve
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function () x
setinverse <- solve(x) m <<- inverse
getinverse <- function()m
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function () x
setinverse <- solve(x) m <<- inverse
getinverse <- function()m
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function () x
setinverse <- solve(x) m <<- inverse
getinverse <- function()m
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function () x
setinverse <- solve(x) m <<- inverse
getinverse <- function()m
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function () x
setinverse <- solve(x) m <<- inverse
getinverse <- function()m
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function () x
setinverse <- solve(x) m<<- inverse
getinverse <- function()m
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function () x
setinverse <- solve(x) m<<- inverse
getinverse <- function()m
args(makeCacheMatris)
args(makeCacheMatrix)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function () x
setinverse <- solve(x) m<<- inverse
getinverse <- function()m
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- solve(x) m<<- inverse
getinverse <- function() m
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function()x
setinverse <- solve(x) m<<- inverse
getinverse <- function()m
}
makeCacheMatrix <- function(x = matrix(1:4, 2, 2))
makeCacheMatrix <- function(x = matrix(1:4, 2, 2)){}
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function()x
setinverse <- solve(x)
x
x <- matrix(1:4, 2, 2)
x
setinverse(x)
setinverse
setinverse <- solve(x)
setinverse
m <<- inverse
y <- setinverse
y
x
y
y
getinverse()
m
data <- x$get()
data <-function()x
x
data
data <- FUNCTION(X)
data <- function(x)
data <- function(x){}
data
m <- function(solve(x))
m <- solve(x)
m
x$setinverse(m)
m
acheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)){
message("getting cached inverse of matrix")
return(m)
}
data <- x$get()
m <- function(solve(x))
x$setinverse(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
}
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(1:100)
makeVector(c(1,2,3,4))
a <- makeVector(c(1,2,3,4))
a
a$get()
akeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function () x
setinverse <- solve(x) m <<- x
getinverse <- function () m
list(set ="set", get = get, setinvese = setinverse, getinverse = getinverse)
}
akeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function () x
setinverse <- solve(x) m <<- x
getinverse <- function () m
list(set ="set", get = get, setinvese = setinverse, getinverse = getinverse)
}
akeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve(x)) m <<- x
getinverse <- function() m
list(set = set, get = get, setinvese = setinverse, getinverse = getinverse)
}
Matrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- solve(x) m <<- (sole(x))
getinverse <- function() m
list(set = set, get = get, setinvese = setinverse, getinverse = getinverse)
}
ion
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- solve(x) m <<- (sole(x))
getinverse <- function() m
list(set = set, get = get, setinvese = setinverse, getinverse = getinverse)
}
ion
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- solve(x) m <<- (sole(x))
getinverse <- function() m
list(set = set, get = get, setinvese = setinverse, getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- solve(x) m <<- (sole(x))
getinverse <- function() m
list(set = set, get = get, setinvese = setinverse, getinverse = getinverse)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- solve(x) m <<- (sole(x))
getinverse <- function() m
list(set = set, get = get, setinvese = setinverse, getinverse = getinverse)
}
atrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get, setinvese = setinverse, getinverse = getinverse)
}
makeChacheMatrix(1:100)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get, setinvese = setinverse, getinverse = getinverse)
}
makeChacheMatrix(1:100)
makeChacheMatrix(1:100)
makeCacheMatrix(1:100)
cacheSolve <- function(x, ...){
m <- x$getinverse()
if(!is.null(m)){
message("getting cached inverse of matrix")
return(m)
}
inverse <- x$get()
m <- (solve(inverse))
x$setinverse(m)
m
}
cacheSolve(1:100)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get, setinvese = setinverse, getinverse = getinverse)
}
cacheSolve <- function(x, ...){
m <- x$getinverse()
if(!is.null(m)){
message("getting cached inverse of matrix")
return(m)
}
inverse <- x$get()
m <- (solve(inverse))
x$setinverse(m)
m
}
makeCacheMatrix(x = matrix(1:100))
cacheSolve(x)
chacheSolve(1:100)
cacheSolve(1:100)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
setmatrix <- function(y) {
x <<- y
m <<- NULL
}
getmatrix <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get, setinvese = setinverse, getinverse = getinverse)
}
cacheSolve <- function (x=matrix(), ...) {
m <- x$getinverse
if(!is.null(m)){
if(x$setmatrix() == x$getmatrix()) { # check that matrix hasn't changed, and if it hasn't, sends a text message and returns the cached matrix
message ("getting inverse matrix")
return(m)
}
y <- x$getmatrix()
x$setmatrix(y)
m <- solve(y, ...)
x$setinverse(m)
m
}
}
makeCacheMatrix(1:100)
a <- matrix(c(4, 2, 7, 6), 2, 2)
b <- makeCacheMatrix(a)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
setmatrix <- function(y) {
x <<- y
m <<- NULL
}
getmatrix <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(setmatrix = setmatrix, getmatrix = getmatrix, setinvese = setinverse, getinverse = getinverse)
}
b <- makeCacheMatrix(a)
b
cacheSolve(b)
